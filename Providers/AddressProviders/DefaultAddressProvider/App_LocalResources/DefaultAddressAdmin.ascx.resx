<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSaveSettings.Text" xml:space="preserve">
    <value>Update Address Settings</value>
  </data>
  <data name="lblAllowPickup.Help" xml:space="preserve">
    <value>Check to display the 'Pickup' delivery option of an order at checkout.</value>
  </data>
  <data name="lblAllowPickup.Text" xml:space="preserve">
    <value>Allow Pickup:</value>
  </data>
  <data name="lblAuthorizedCountries.Help" xml:space="preserve">
    <value>Select countries authorized to place order.</value>
  </data>
  <data name="lblAuthorizedCountries.Text" xml:space="preserve">
    <value>Authorized Countries:</value>
  </data>
  <data name="lblRestrictToCountries.Help" xml:space="preserve">
    <value>Allows to define countries authorized to place order.</value>
  </data>
  <data name="lblRestrictToCountries.Text" xml:space="preserve">
    <value>Restrict To Countries:</value>
  </data>
  <data name="lblShowCell.Help" xml:space="preserve">
    <value>Check to display the Cell field. Check 'Required' if the field is required. Select the display order of the field.</value>
  </data>
  <data name="lblShowCell.Text" xml:space="preserve">
    <value>Show Cell:</value>
  </data>
  <data name="lblShowCity.Help" xml:space="preserve">
    <value>Check to display the City field. Select the display order of the field.</value>
  </data>
  <data name="lblShowCity.Text" xml:space="preserve">
    <value>Show City:</value>
  </data>
  <data name="lblShowCountry.Help" xml:space="preserve">
    <value>Check to display the Country field. Select the display order of the field.</value>
  </data>
  <data name="lblShowCountry.Text" xml:space="preserve">
    <value>Show Country:</value>
  </data>
  <data name="lblShowPostal.Help" xml:space="preserve">
    <value>Check to display the Postal field. Select the display order of the field.</value>
  </data>
  <data name="lblShowPostal.Text" xml:space="preserve">
    <value>Show Postal:</value>
  </data>
  <data name="lblShowRegion.Help" xml:space="preserve">
    <value>When unchecked, the region field will be not displayed. If 'Show Country' is checked and the selected country have States/Regions defined at the Host level, the corresponding list will be displayed whatever the value of this setting. Select the display order of the field.</value>
  </data>
  <data name="lblShowRegion.Text" xml:space="preserve">
    <value>Show Region:</value>
  </data>
  <data name="lblShowStreet.Help" xml:space="preserve">
    <value>Check to display the Street field. Select the display order of the field.</value>
  </data>
  <data name="lblShowStreet.Text" xml:space="preserve">
    <value>Show Street:</value>
  </data>
  <data name="lblShowTelephone.Help" xml:space="preserve">
    <value>Check to display the Telephone field. Check 'Required' if the field is required. Select the display order of the field.</value>
  </data>
  <data name="lblShowTelephone.Text" xml:space="preserve">
    <value>Show Telephone:</value>
  </data>
  <data name="lblShowUnit.Help" xml:space="preserve">
    <value>Check to display the Unit field. Select the display order of the field.</value>
  </data>
  <data name="lblShowUnit.Text" xml:space="preserve">
    <value>Show Unit:</value>
  </data>
  <data name="Required.Text" xml:space="preserve">
    <value>Required - </value>
  </data>
  <data name="valReqAuthorizedCountries.Error" xml:space="preserve">
    <value>&lt;br/&gt;At least one country have to be selected!</value>
  </data>
  <data name="lblEmail.Help" xml:space="preserve">
    <value>Select the display order of the Email field.</value>
  </data>
  <data name="lblEmail.Text" xml:space="preserve">
    <value>Email:</value>
  </data>
  <data name="lblFirstName.Help" xml:space="preserve">
    <value>Select the display order of the First Name field.</value>
  </data>
  <data name="lblFirstName.Text" xml:space="preserve">
    <value>First Name:</value>
  </data>
  <data name="lblLastName.Help" xml:space="preserve">
    <value>Select the display order of the Last Name field.</value>
  </data>
  <data name="lblLastName.Text" xml:space="preserve">
    <value>Last Name:</value>
  </data>
  <data name="RowOrder.Text" xml:space="preserve">
    <value>Display order:</value>
  </data>
</root>